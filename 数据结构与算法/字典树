系统设计
Trie树（单词查找树/键树），应用于统计和排序大量的字符串(不仅限于字符串)，被搜索引擎系统用于文本词频统计。
优点：最大限度地减少无谓的字符串比较，查询效率比哈希表高。
边来存字母，路径记录单词。单词长度--边条数
搜索：延展的词，按照频次排序进行推荐。
核心思想：空间换时间,利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。
eg：单词每一位是树的一层，每一层开始，路径代表单词。

Class TriesNode:
  def __init__(self):
    self.children=[None]*ALPHABET_SIZE  
    self.isEndOfWord=False(单词插入，相应的节点设置为True)
 1.根节点不包含字符，除根节点外每一个节点都只包含一个字符。
 2.从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。
 3.每个节点的所有子节点包含的字符都不相同。
