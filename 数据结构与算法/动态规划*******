Dynamic Programming:(动态递推)
1.递归+记忆化--->递推
2.状态的定义：opt[n]
3.状态转移方程：opt[n]=best_of(opt[n-1],opt[n-2],...)   DP
4.最优子结构 

存放状态。         递推：从下往上，进行累加 （递归+记忆化）


简单递归会有重复计算------>记忆化---------->DP

编程题目网格思路：---------------------------------------------------------------------------------------------------------------------
opt[i,j]=opt[i-1,j]+opt[i,j-1]                  自底向上进行递推


最优子结构：存在大量最优子结构可以解决的问题。
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————
DP vs 回溯 vs 贪心
回溯（递归）-重复计算。
贪心-永远局部最优。
DP-记录局部最优子结构/多种记录值。(动态递推：记录局部最优避免重复计算，通过动态转移方程，推导下一状态最优值)

本质：递归+避免重复计算------贪心+不止关注局部最优
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————













